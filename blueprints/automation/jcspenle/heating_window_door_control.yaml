blueprint:
  name: Heating Control - Window/Door Open Detection v1.3.0
  source_url: https://raw.githubusercontent.com/jcspenle/HA_SensorPilotWire/main/blueprints/automation/jcspenle/heating_window_door_control.yaml
  description: >
    Simplified and robust heating control with window/door sensors.
    - Windows: immediate action | Doors: configurable delay (default 4 min)
    - Standard (climate presets) or NodOn (select entity) modules
    - Support for inverted sensor logic (on=closed / off=open)
    - Smart restoration mode to remember previous state
    - French notifications and activity logging
    - v1.3.0: Complete rewrite - simplified, consistent, English keywords
  domain: automation

  input:
    # === CORE SETTINGS ===
    automation_status:
      name: Automation Status
      description: Choose 'Active' to enable or 'Bypass' to disable the automation
      selector:
        select:
          options: ["Active", "Bypass"]
      default: "Active"

    module_type:
      name: Heating Module Type
      description: "Standard: uses climate presets | NodOn: uses select entity"
      selector:
        select:
          options: ["Standard", "NodOn"]
      default: "Standard"

    heating_entity:
      name: Heating Entity
      description: |
        Select the entity that controls your heating:
        - Standard module: select climate.xxx
        - NodOn module: select select.xxx_pilot_wire_mode or climate.xxx
        The blueprint will automatically detect the correct entities.
      selector:
        entity:
          domain: 
            - climate
            - select

    # === SENSORS ===
    window_sensors:
      name: Window Sensors (optional)
      description: Select one or more window sensors. Leave empty if only doors.
      selector:
        entity:
          domain: binary_sensor
          multiple: true
      default: []

    door_sensors:
      name: Door Sensors (optional)
      description: Select door sensors (will wait delay before action). Leave empty if only windows.
      selector:
        entity:
          domain: binary_sensor
          multiple: true
      default: []

    sensor_logic:
      name: Sensor Logic
      description: "Normal: on=open, off=closed | Inverted: on=closed, off=open"
      selector:
        select:
          options: ["Normal", "Inverted"]
      default: "Normal"

    # === TIMING ===
    door_open_delay:
      name: Door Open Delay
      description: Minimum time door must be open before action (DOOR sensors only)
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 4
        seconds: 0

    min_closed_duration:
      name: Minimum Closed Duration
      description: Wait this delay before restoring heating (prevents rapid changes)
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 2
        seconds: 0

    # === HEATING MODES ===
    mode_when_open:
      name: Mode When Open
      description: Climate preset when window opened (immediate) or door opened (after delay)
      selector:
        select:
          options: ["comfort", "comfort-1", "comfort-2", "eco", "off"]
      default: "off"

    mode_when_closed:
      name: Mode When Closed
      description: Climate preset when ALL sensors are closed (restoration mode)
      selector:
        select:
          options: ["comfort", "comfort-1", "comfort-2", "eco", "off"]
      default: "comfort"

    smart_restore:
      name: Smart Restore
      description: Remember and restore previous mode instead of using default mode
      selector:
        boolean: {}
      default: false

    # === NOTIFICATIONS & LOGGING ===
    room_name:
      name: Room Name
      description: Room name for notifications and logs (e.g. "Living Room", "Bedroom")
      selector:
        text: {}
      default: "Room"

    notify_devices:
      name: Devices to Notify (optional)
      description: Select mobile devices to receive notifications. Leave empty to disable.
      selector:
        device:
          integration: mobile_app
          multiple: true
      default: []

    log_entity:
      name: Log Entity (optional)
      description: input_text to log activity. Leave empty to disable.
      selector:
        entity:
          domain: input_text
      default: ""

    window_status_sensor:
      name: Window Status Sensor (optional)
      description: input_text to display window status in dashboard. Leave empty to disable.
      selector:
        entity:
          domain: input_text
      default: ""

    door_status_sensor:
      name: Door Status Sensor (optional)
      description: input_text to display door status in dashboard. Leave empty to disable.
      selector:
        entity:
          domain: input_text
      default: ""

# ===== VARIABLES =====
variables:
  # Core configuration
  status_raw: !input automation_status
  status: "{{ status_raw }}"
  module_type: !input module_type
  heating_ent: !input heating_entity
  
  # Entity detection
  climate: >
    {% if module_type == 'NodOn' %}
      {% if heating_ent.startswith('select.') %}
        {{ heating_ent.replace('_pilot_wire_mode', '').replace('select.', 'climate.') }}
      {% else %}
        {{ heating_ent }}
      {% endif %}
    {% else %}
      {{ heating_ent }}
    {% endif %}
  
  pilot_select: >
    {% if module_type == 'NodOn' %}
      {% if heating_ent.startswith('select.') %}
        {{ heating_ent }}
      {% else %}
        {{ heating_ent.replace('climate.', 'select.') ~ '_pilot_wire_mode' }}
      {% endif %}
    {% else %}
      ''
    {% endif %}
  
  # Sensors
  windows: !input window_sensors
  doors: !input door_sensors
  all_sensors: "{{ windows + doors }}"
  logic: !input sensor_logic
  
  # States based on logic
  state_open: "{{ 'off' if logic == 'Inverted' else 'on' }}"
  state_closed: "{{ 'on' if logic == 'Inverted' else 'off' }}"
  
  # Modes
  open_mode: !input mode_when_open
  closed_mode: !input mode_when_closed
  smart_mode: !input smart_restore
  
  # Mode mapping for NodOn (comfort-1 → comfort_-1)
  open_mode_mapped: >
    {{ 'comfort_-1' if open_mode == 'comfort-1' else 
       'comfort_-2' if open_mode == 'comfort-2' else open_mode }}
  
  closed_mode_mapped: >
    {{ 'comfort_-1' if closed_mode == 'comfort-1' else 
       'comfort_-2' if closed_mode == 'comfort-2' else closed_mode }}
  
  # Current preset for smart restore
  current_preset: >
    {% if module_type == 'NodOn' and pilot_select != '' %}
      {{ states(pilot_select) }}
    {% else %}
      {{ state_attr(climate, 'preset_mode') }}
    {% endif %}
  
  # Other settings
  room: !input room_name
  notify_devs: !input notify_devices
  log_ent: !input log_entity
  window_sensor: !input window_status_sensor
  door_sensor: !input door_status_sensor

# ===== TRIGGERS =====
trigger:
  # Windows opened - immediate action
  - platform: state
    entity_id: !input window_sensors
    to: "{{ state_open }}"
    id: window_opened

  # Windows closed
  - platform: state
    entity_id: !input window_sensors
    to: "{{ state_closed }}"
    id: window_closed

  # Doors opened - will wait delay
  - platform: state
    entity_id: !input door_sensors
    to: "{{ state_open }}"
    id: door_opened

  # Doors closed
  - platform: state
    entity_id: !input door_sensors
    to: "{{ state_closed }}"
    id: door_closed

# ===== CONDITIONS =====
condition:
  # Must be Active
  - condition: template
    value_template: "{{ status == 'Active' }}"
  
  # Must have at least one sensor
  - condition: template
    value_template: "{{ (windows | length > 0) or (doors | length > 0) }}"

# ===== ACTIONS =====
action:
  - choose:
      # === WINDOW OPENED (immediate) ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'window_opened' }}"
        sequence:
          # Update window status
          - if:
              - condition: template
                value_template: "{{ window_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ window_sensor }}"
                data:
                  value: >
                    {{ expand(windows) | selectattr('state', 'eq', state_open) | list | length }} fenêtre(s) ouverte(s)
          
          # Turn off or set mode
          - choose:
              # NodOn module
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ open_mode_mapped }}"
            # Standard module
            default:
              - if:
                  - condition: template
                    value_template: "{{ open_mode == 'off' }}"
                then:
                  - service: climate.turn_off
                    target:
                      entity_id: "{{ climate }}"
                else:
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ open_mode }}"
          
          # Log
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Fenêtre ouverte - Chauffage {{ 'ÉTEINT' if open_mode == 'off' else 'mode ' + open_mode }}
          
          # Notify
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: "🪟 {{ room }}: Fenêtre ouverte - Chauffage {{ 'éteint' if open_mode == 'off' else 'réduit (' + open_mode + ')' }}"
                        title: "Chauffage désactivé"

      # === WINDOW CLOSED ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'window_closed' }}"
        sequence:
          # Wait anti-bounce
          - delay: !input min_closed_duration
          
          # Check ALL sensors closed
          - condition: template
            value_template: >
              {{ expand(all_sensors) | selectattr('state', 'eq', state_open) | list | length == 0 }}
          
          # Update status
          - if:
              - condition: template
                value_template: "{{ window_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ window_sensor }}"
                data:
                  value: "Toutes les fenêtres fermées"
          
          # Determine restore mode
          - variables:
              restore_mode: >
                {% if smart_mode and current_preset not in [none, 'none', 'unavailable'] %}
                  {{ current_preset }}
                {% else %}
                  {{ closed_mode if module_type == 'Standard' else closed_mode_mapped }}
                {% endif %}
          
          # Restore heating
          - choose:
              # NodOn
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ restore_mode }}"
            # Standard
            default:
              - if:
                  - condition: template
                    value_template: "{{ restore_mode == 'off' }}"
                then:
                  - service: climate.turn_off
                    target:
                      entity_id: "{{ climate }}"
                else:
                  - service: climate.turn_on
                    target:
                      entity_id: "{{ climate }}"
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ restore_mode }}"
          
          # Log
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Tout fermé - Chauffage {{ 'ALLUMÉ' if restore_mode != 'off' else 'ÉTEINT' }} ({{ restore_mode }})
          
          # Notify
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: "✅ {{ room }}: Tout fermé - Chauffage {{ 'rallumé' if restore_mode != 'off' else 'éteint' }} ({{ restore_mode }})"
                        title: "Chauffage restauré"

      # === DOOR OPENED (with delay) ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'door_opened' }}"
        sequence:
          # Wait delay
          - delay: !input door_open_delay
          
          # Check still open
          - condition: template
            value_template: >
              {{ expand(doors) | selectattr('state', 'eq', state_open) | list | length > 0 }}
          
          # Update status
          - if:
              - condition: template
                value_template: "{{ door_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ door_sensor }}"
                data:
                  value: >
                    {{ expand(doors) | selectattr('state', 'eq', state_open) | list | length }} porte(s) ouverte(s)
          
          # Turn off or set mode
          - choose:
              # NodOn
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ open_mode_mapped }}"
            # Standard
            default:
              - if:
                  - condition: template
                    value_template: "{{ open_mode == 'off' }}"
                then:
                  - service: climate.turn_off
                    target:
                      entity_id: "{{ climate }}"
                else:
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ open_mode }}"
          
          # Log
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Porte ouverte - Chauffage {{ 'ÉTEINT' if open_mode == 'off' else 'mode ' + open_mode }}
          
          # Notify
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: "🚪 {{ room }}: Porte ouverte - Chauffage {{ 'éteint' if open_mode == 'off' else 'réduit (' + open_mode + ')' }}"
                        title: "Chauffage désactivé"

      # === DOOR CLOSED ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'door_closed' }}"
        sequence:
          # Wait anti-bounce
          - delay: !input min_closed_duration
          
          # Check ALL sensors closed
          - condition: template
            value_template: >
              {{ expand(all_sensors) | selectattr('state', 'eq', state_open) | list | length == 0 }}
          
          # Update status
          - if:
              - condition: template
                value_template: "{{ door_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ door_sensor }}"
                data:
                  value: "Toutes les portes fermées"
          
          # Determine restore mode
          - variables:
              restore_mode: >
                {% if smart_mode and current_preset not in [none, 'none', 'unavailable'] %}
                  {{ current_preset }}
                {% else %}
                  {{ closed_mode if module_type == 'Standard' else closed_mode_mapped }}
                {% endif %}
          
          # Restore heating
          - choose:
              # NodOn
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ restore_mode }}"
            # Standard
            default:
              - if:
                  - condition: template
                    value_template: "{{ restore_mode == 'off' }}"
                then:
                  - service: climate.turn_off
                    target:
                      entity_id: "{{ climate }}"
                else:
                  - service: climate.turn_on
                    target:
                      entity_id: "{{ climate }}"
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ restore_mode }}"
          
          # Log
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Tout fermé - Chauffage {{ 'ALLUMÉ' if restore_mode != 'off' else 'ÉTEINT' }} ({{ restore_mode }})
          
          # Notify
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: "✅ {{ room }}: Tout fermé - Chauffage {{ 'rallumé' if restore_mode != 'off' else 'éteint' }} ({{ restore_mode }})"
                        title: "Chauffage restauré"

mode: restart
