blueprint:
  name: Heating Control - Window/Door Open Detection
  source_url: https://raw.githubusercontent.com/jcspenle/HA_SensorPilotWire/main/blueprints/automation/jcspenle/heating_window_door_control.yaml
  description: >
    Automated heating control with window/door sensors.
    - Up to 6 sensors per room (separate lists for windows and doors).
    - Windows: immediate action; Doors: action after 4 minutes open.
    - Configurable modes when open/closed (comfort, comfort-1, comfort-2, eco, off).
    - Bypass switch (input_boolean) to disable logic per room.
  domain: automation

  input:
    climate_entity:
      name: Climate Entity (Heater)
      selector:
        entity:
          domain: climate

    window_sensors:
      name: Window Sensors
      description: Select up to 6 window sensors for this room.
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true

    door_sensors:
      name: Door Sensors
      description: Select up to 6 door sensors for this room (4 min delay before action).
      selector:
        entity:
          domain: binary_sensor
          device_class: door
          multiple: true

    mode_when_open:
      name: Mode When Open
      description: Climate preset when any window is open (immediate) or any door is open for 4 min.
      selector:
        select:
          options:
            - "comfort"
            - "comfort-1"
            - "comfort-2"
            - "eco"
            - "off"
      default: "off"

    mode_when_closed:
      name: Mode When Closed
      description: Climate preset when ALL sensors are closed (restore mode).
      selector:
        select:
          options:
            - "comfort"
            - "comfort-1"
            - "comfort-2"
            - "eco"
            - "off"
      default: "comfort"

    bypass_switch:
      name: Bypass switch (input_boolean)
      description: When ON, disables this automation (maintenance / battery issue / manual override).
      selector:
        entity:
          domain: input_boolean

# ===== Variables =====
variables:
  climate: !input climate_entity
  open_mode: !input mode_when_open
  closed_mode: !input mode_when_closed
  windows: !input window_sensors
  doors: !input door_sensors
  bypass: !input bypass_switch
  all_sensors: >
    {{ (windows | default([])) + (doors | default([])) }}

# ===== Triggers =====
trigger:
  # Window opened -> immediate
  - platform: state
    entity_id: !input window_sensors
    to: "on"
    id: window_opened

  # Door opened -> after 4 minutes open
  - platform: state
    entity_id: !input door_sensors
    to: "on"
    for: "00:04:00"
    id: door_opened

  # Any sensor closed -> potential restore (we check ALL closed in conditions)
  - platform: state
    entity_id: !input window_sensors
    to: "off"
    id: sensor_closed
  - platform: state
    entity_id: !input door_sensors
    to: "off"
    id: sensor_closed

# ===== Conditions =====
condition:
  # Bypass must be OFF
  - condition: template
    value_template: "{{ is_state(bypass, 'off') }}"
  # If open-trigger -> always proceed; if close-trigger -> ensure ALL sensors are closed
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ trigger.id in ['window_opened','door_opened'] }}"
      - condition: template
        value_template: >
          {{ trigger.id == 'sensor_closed'
             and (expand(all_sensors) | selectattr('state','eq','on') | list | length == 0) }}

# ===== Actions =====
action:
  - choose:
      # === OPEN CASE ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id in ['window_opened','door_opened'] }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ open_mode == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entity
            default:
              - service: climate.set_preset_mode
                target:
                  entity_id: !input climate_entity
                data:
                  preset_mode: "{{ open_mode }}"

      # === ALL CLOSED CASE ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'sensor_closed' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ closed_mode == 'off' }}"
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: !input climate_entity
            default:
              - service: climate.turn_on
                target:
                  entity_id: !input climate_entity
              - service: climate.set_preset_mode
                target:
                  entity_id: !input climate_entity
                data:
                  preset_mode: "{{ closed_mode }}"
    default: []

mode: single
