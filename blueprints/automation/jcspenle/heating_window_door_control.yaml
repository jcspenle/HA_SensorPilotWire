blueprint:
  name: Heating Control - Window/Door Open Detection v2.0 Standard/NodOn
  source_url: https://raw.githubusercontent.com/jcspenle/HA_SensorPilotWire/main/blueprints/automation/jcspenle/heating_window_door_control_universal.yaml
  description: >
    Automated heating control with window/door sensors - Compatible Standard & NodOn modules.
    - Windows: immediate action; Doors: action after a configurable delay (default 4 minutes).
    - Configurable modes when open/closed (comfort, comfort-1, comfort-2, eco, off).
    - Automation status selector (Activated / Bypass).
    - Module type selector: Standard (climate presets) or NodOn (select entity).
    - Window sensors required; door sensors optional.
    - Support for inverted sensor logic (on=closed / off=open).
    - Notifications in French when heating state changes.
    - Activity logging with room names.
    - Smart mode: restores previous preset when closing.
    - Dashboard sensors for windows and doors status.
  domain: automation

  input:
    automation_status:
      name: Statut de l'automation
      description: Choisir 'Activé' pour activer la logique ou 'Bypass' pour la désactiver.
      selector:
        select:
          options: ["Activé","Bypass"]
      default: "Activé"

    module_type:
      name: Type de module chauffage
      description: "Standard: utilise les presets climate | NodOn: utilise l'entité select fil pilote"
      selector:
        select:
          options: ["Standard", "NodOn"]
      default: "Standard"

    heating_entity:
      name: Entité de chauffage
      description: |
        Sélectionnez l'entité qui contrôle votre chauffage :
        - Module Standard : sélectionnez climate.xxx
        - Module NodOn : sélectionnez select.xxx_pilot_wire_mode
        Le blueprint détectera automatiquement les bonnes entités.
      selector:
        entity:
          domain: 
            - climate
            - select

    window_sensors:
      name: Capteurs de fenêtres (requis)
      description: Sélectionner un ou plusieurs capteurs de fenêtre pour cette pièce.
      selector:
        entity:
          domain: binary_sensor
          device_class: window
          multiple: true

    door_sensors:
      name: Capteurs de portes (optionnel)
      description: Sélectionner les capteurs de porte pour cette pièce (délai avant action). Laisser vide si aucun.
      selector:
        entity:
          domain: binary_sensor
          device_class: door
          multiple: true
      default: []

    sensor_logic:
      name: Logique des capteurs
      description: "Normal: on=ouvert, off=fermé | Inversé: on=fermé, off=ouvert"
      selector:
        select:
          options: ["Normal","Inversé"]
      default: "Normal"

    door_open_delay:
      name: Délai d'ouverture porte
      description: Temps minimum d'ouverture continue avant action pour les capteurs de PORTE.
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 4
        seconds: 0

    min_closed_duration:
      name: Durée minimale de fermeture
      description: Attendre ce délai avant de restaurer le chauffage (évite les changements rapides).
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 2
        seconds: 0

    mode_when_open:
      name: Mode quand ouvert
      description: Preset du climate quand une fenêtre est ouverte (immédiat) ou une porte est ouverte (après délai).
      selector:
        select:
          options: ["comfort","comfort-1","comfort-2","eco","off"]
      default: "off"

    mode_when_closed:
      name: Mode quand fermé
      description: Preset du climate quand TOUS les capteurs sont fermés (mode de restauration).
      selector:
        select:
          options: ["comfort","comfort-1","comfort-2","eco","off"]
      default: "comfort"

    smart_restore:
      name: Restauration intelligente
      description: Mémoriser et restaurer le mode précédent au lieu d'utiliser le mode par défaut.
      selector:
        boolean: {}
      default: false

    room_name:
      name: Nom de la pièce
      description: Nom de la pièce pour les notifications et logs (ex. "Salon", "Chambre").
      selector:
        text: {}
      default: "Pièce"

    notify_devices:
      name: Appareils à notifier (optionnel)
      description: Sélectionner un ou plusieurs appareils mobiles pour recevoir les notifications. Laisser vide pour désactiver.
      selector:
        device:
          integration: mobile_app
          multiple: true
      default: []

    log_entity:
      name: Entité de log (optionnel)
      description: input_text pour logger l'activité (créer un helper input_text si besoin). Laisser vide pour désactiver.
      selector:
        entity:
          domain: input_text
      default: ""

    window_status_sensor:
      name: Capteur d'état fenêtres (optionnel)
      description: input_text pour afficher l'état des fenêtres dans le dashboard. Laisser vide pour désactiver.
      selector:
        entity:
          domain: input_text
      default: ""

    door_status_sensor:
      name: Capteur d'état portes (optionnel)
      description: input_text pour afficher l'état des portes dans le dashboard. Laisser vide pour désactiver.
      selector:
        entity:
          domain: input_text
      default: ""

# ===== Variables =====
variables:
  status: !input automation_status
  module_type: !input module_type
  heating_ent: !input heating_entity
  
  # Détection et extraction automatique des entités selon le type
  climate: >
    {% if module_type == 'NodOn' %}
      {% if heating_ent.startswith('select.') %}
        {{ heating_ent.replace('_pilot_wire_mode', '').replace('select.', 'climate.') }}
      {% else %}
        {{ heating_ent }}
      {% endif %}
    {% else %}
      {{ heating_ent }}
    {% endif %}
  
  pilot_select: >
    {% if module_type == 'NodOn' %}
      {% if heating_ent.startswith('select.') %}
        {{ heating_ent }}
      {% else %}
        {{ heating_ent.replace('climate.', 'select.') ~ '_pilot_wire_mode' }}
      {% endif %}
    {% else %}
      ''
    {% endif %}
  
  open_mode: !input mode_when_open
  closed_mode: !input mode_when_closed
  windows: !input window_sensors
  doors: !input door_sensors
  door_delay: !input door_open_delay
  min_close_delay: !input min_closed_duration
  logic: !input sensor_logic
  smart_mode: !input smart_restore
  room: !input room_name
  notify_devs: !input notify_devices
  log_ent: !input log_entity
  window_sensor: !input window_status_sensor
  door_sensor: !input door_status_sensor
  
  all_sensors: >
    {{ (windows | default([])) + (doors | default([])) }}
  
  has_doors: >
    {{ (doors | default([]) | length) > 0 }}
  
  state_open: >
    {{ 'off' if logic == 'Inversé' else 'on' }}
  
  state_closed: >
    {{ 'on' if logic == 'Inversé' else 'off' }}
  
  current_preset: >
    {% if module_type == 'NodOn' and pilot_select != '' %}
      {{ states(pilot_select) }}
    {% else %}
      {{ state_attr(climate, 'preset_mode') }}
    {% endif %}
  
  # Mapper les modes pour NodOn (comfort-1 → comfort_-1)
  open_mode_mapped: >
    {% set mode = open_mode %}
    {{ 'comfort_-1' if mode == 'comfort-1' else 
       'comfort_-2' if mode == 'comfort-2' else mode }}
  
  closed_mode_mapped: >
    {% set mode = closed_mode %}
    {{ 'comfort_-1' if mode == 'comfort-1' else 
       'comfort_-2' if mode == 'comfort-2' else mode }}

# ===== Triggers =====
trigger:
  # Windows state change
  - platform: state
    entity_id: !input window_sensors
    id: window_state_change

  # Template trigger for doors opened (only fires if doors exist)
  - platform: template
    value_template: >
      {% set door_list = doors | default([]) %}
      {% set open_state = 'off' if logic == 'Inversé' else 'on' %}
      {{ door_list | length > 0 and 
         expand(door_list) | selectattr('state','eq', open_state) | list | length > 0 }}
    id: door_opened

  # Template trigger for door closed (only fires if doors exist)
  - platform: template
    value_template: >
      {% set door_list = doors | default([]) %}
      {% set closed_state = 'on' if logic == 'Inversé' else 'off' %}
      {{ door_list | length > 0 and 
         expand(door_list) | selectattr('state','eq', closed_state) | list | length > 0 }}
    id: door_closed

# ===== Conditions =====
condition:
  # Must be activated via status
  - condition: template
    value_template: "{{ status == 'Activé' }}"
  
  # Require at least one window sensor selected
  - condition: template
    value_template: "{{ (windows | default([])) | length > 0 }}"
  
  # Validate heating entity corresponds to module type
  - condition: template
    value_template: >
      {{ (module_type == 'Standard' and heating_ent.startswith('climate.')) or
         (module_type == 'NodOn' and (heating_ent.startswith('select.') or heating_ent.startswith('climate.'))) }}

# ===== Actions =====
action:
  - choose:
      # === WINDOW STATE CHANGE ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'window_state_change' }}"
        sequence:
          - choose:
              # WINDOW OPENED (immediate action)
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == state_open }}"
                sequence:
                  # Update window status sensor
                  - if:
                      - condition: template
                        value_template: "{{ window_sensor != '' }}"
                    then:
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ window_sensor }}"
                        data:
                          value: >
                            {{ expand(windows) | selectattr('state','eq', state_open) | list | length }} fenêtre(s) ouverte(s)
                  
                  # Apply OPEN mode according to module type
                  - choose:
                      # MODULE NODON
                      - conditions:
                          - condition: template
                            value_template: "{{ module_type == 'NodOn' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ pilot_select }}"
                            data:
                              option: "{{ open_mode_mapped }}"
                    # MODULE STANDARD
                    default:
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ open_mode == 'off' }}"
                            sequence:
                              - service: climate.turn_off
                                target:
                                  entity_id: "{{ climate }}"
                        default:
                          - service: climate.set_preset_mode
                            target:
                              entity_id: "{{ climate }}"
                            data:
                              preset_mode: "{{ open_mode }}"
                  
                  # Log action
                  - if:
                      - condition: template
                        value_template: "{{ log_ent != '' }}"
                    then:
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ log_ent }}"
                        data:
                          value: >
                            {{ now().strftime('%H:%M') }} - {{ room }}: Fenêtre ouverte - Chauffage {{ 'ÉTEINT' if open_mode == 'off' else 'mode ' + open_mode }}
                  
                  # Send notification
                  - if:
                      - condition: template
                        value_template: "{{ notify_devs | length > 0 }}"
                    then:
                      - repeat:
                          for_each: "{{ notify_devs }}"
                          sequence:
                            - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                              data:
                                message: >
                                  🪟 {{ room }}: Fenêtre ouverte - Chauffage {{ 'éteint' if open_mode == 'off' else 'réduit (' + open_mode + ')' }}
                                title: "Chauffage désactivé"

              # WINDOW CLOSED - check if ALL sensors are closed
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == state_closed }}"
                sequence:
                  # Wait minimum closed duration (anti-bounce)
                  - delay: !input min_closed_duration
                  # Verify ALL sensors are now closed
                  - condition: template
                    value_template: >
                      {{ expand(all_sensors) | selectattr('state','eq', state_open) | list | length == 0 }}
                  
                  # Update window status sensor
                  - if:
                      - condition: template
                        value_template: "{{ window_sensor != '' }}"
                    then:
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ window_sensor }}"
                        data:
                          value: "Toutes les fenêtres fermées"
                  
                  # Determine mode to restore
                  - variables:
                      restore_mode: >
                        {% if smart_mode and current_preset != none and current_preset != 'none' %}
                          {{ current_preset }}
                        {% else %}
                          {{ closed_mode if module_type == 'Standard' else closed_mode_mapped }}
                        {% endif %}
                  
                  # Apply restore mode according to module type
                  - choose:
                      # MODULE NODON
                      - conditions:
                          - condition: template
                            value_template: "{{ module_type == 'NodOn' }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ pilot_select }}"
                            data:
                              option: "{{ restore_mode }}"
                    # MODULE STANDARD
                    default:
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ restore_mode == 'off' }}"
                            sequence:
                              - service: climate.turn_off
                                target:
                                  entity_id: "{{ climate }}"
                        default:
                          - service: climate.turn_on
                            target:
                              entity_id: "{{ climate }}"
                          - service: climate.set_preset_mode
                            target:
                              entity_id: "{{ climate }}"
                            data:
                              preset_mode: "{{ restore_mode }}"
                  
                  # Log action
                  - if:
                      - condition: template
                        value_template: "{{ log_ent != '' }}"
                    then:
                      - service: input_text.set_value
                        target:
                          entity_id: "{{ log_ent }}"
                        data:
                          value: >
                            {{ now().strftime('%H:%M') }} - {{ room }}: Tout fermé - Chauffage {{ 'ALLUMÉ' if restore_mode != 'off' else 'ÉTEINT' }} ({{ restore_mode }})
                  
                  # Send notification
                  - if:
                      - condition: template
                        value_template: "{{ notify_devs | length > 0 }}"
                    then:
                      - repeat:
                          for_each: "{{ notify_devs }}"
                          sequence:
                            - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                              data:
                                message: >
                                  ✅ {{ room }}: Tout fermé - Chauffage {{ 'rallumé' if restore_mode != 'off' else 'éteint' }} ({{ restore_mode }})
                                title: "Chauffage restauré"

      # === DOOR OPENED (with delay) ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'door_opened' }}"
        sequence:
          # Wait configured delay
          - delay: !input door_open_delay
          # Verify at least one door is still open
          - condition: template
            value_template: >
              {{ expand(doors) | selectattr('state','eq', state_open) | list | length > 0 }}
          
          # Update door status sensor
          - if:
              - condition: template
                value_template: "{{ door_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ door_sensor }}"
                data:
                  value: >
                    {{ expand(doors) | selectattr('state','eq', state_open) | list | length }} porte(s) ouverte(s)
          
          # Apply OPEN mode according to module type
          - choose:
              # MODULE NODON
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ open_mode_mapped }}"
            # MODULE STANDARD
            default:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ open_mode == 'off' }}"
                    sequence:
                      - service: climate.turn_off
                        target:
                          entity_id: "{{ climate }}"
                default:
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ open_mode }}"
          
          # Log action
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Porte ouverte (>{{ (door_delay.minutes | default(4)) }}min) - Chauffage {{ 'ÉTEINT' if open_mode == 'off' else 'mode ' + open_mode }}
          
          # Send notification
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: >
                          🚪 {{ room }}: Porte ouverte - Chauffage {{ 'éteint' if open_mode == 'off' else 'réduit (' + open_mode + ')' }}
                        title: "Chauffage désactivé"

      # === DOOR CLOSED ===
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'door_closed' }}"
        sequence:
          # Wait minimum closed duration
          - delay: !input min_closed_duration
          # Verify ALL sensors are now closed
          - condition: template
            value_template: >
              {{ expand(all_sensors) | selectattr('state','eq', state_open) | list | length == 0 }}
          
          # Update door status sensor
          - if:
              - condition: template
                value_template: "{{ door_sensor != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ door_sensor }}"
                data:
                  value: "Toutes les portes fermées"
          
          # Determine mode to restore
          - variables:
              restore_mode: >
                {% if smart_mode and current_preset != none and current_preset != 'none' %}
                  {{ current_preset }}
                {% else %}
                  {{ closed_mode if module_type == 'Standard' else closed_mode_mapped }}
                {% endif %}
          
          # Apply restore mode according to module type
          - choose:
              # MODULE NODON
              - conditions:
                  - condition: template
                    value_template: "{{ module_type == 'NodOn' }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ pilot_select }}"
                    data:
                      option: "{{ restore_mode }}"
            # MODULE STANDARD
            default:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ restore_mode == 'off' }}"
                    sequence:
                      - service: climate.turn_off
                        target:
                          entity_id: "{{ climate }}"
                default:
                  - service: climate.turn_on
                    target:
                      entity_id: "{{ climate }}"
                  - service: climate.set_preset_mode
                    target:
                      entity_id: "{{ climate }}"
                    data:
                      preset_mode: "{{ restore_mode }}"
          
          # Log action
          - if:
              - condition: template
                value_template: "{{ log_ent != '' }}"
            then:
              - service: input_text.set_value
                target:
                  entity_id: "{{ log_ent }}"
                data:
                  value: >
                    {{ now().strftime('%H:%M') }} - {{ room }}: Tout fermé - Chauffage {{ 'ALLUMÉ' if restore_mode != 'off' else 'ÉTEINT' }} ({{ restore_mode }})
          
          # Send notification
          - if:
              - condition: template
                value_template: "{{ notify_devs | length > 0 }}"
            then:
              - repeat:
                  for_each: "{{ notify_devs }}"
                  sequence:
                    - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                      data:
                        message: >
                          ✅ {{ room }}: Tout fermé - Chauffage {{ 'rallumé' if restore_mode != 'off' else 'éteint' }} ({{ restore_mode }})
                        title: "Chauffage restauré"
    default: []

mode: single
